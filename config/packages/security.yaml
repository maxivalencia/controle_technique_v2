security:
    role_hierarchy:
        ROLE_VISITE : ROLE_USER
        ROLE_RECEPTION : ROLE_USER
        ROLE_CONSTATATION : ROLE_USER
        ROLE_VERIFICATEUR : ROLE_USER
        ROLE_APPROVISIONNEMENT : ROLE_USER
        ROLE_REGISSEUR : ROLE_USER
        ROLE_STAFF : ROLE_USER
        ROLE_CONSTATATION_RECEPTION : [ROLE_CONSTATATION, ROLE_RECEPTION]
        ROLE_CONSTATATION_VISITE : [ROLE_CONSTATATION, ROLE_VISITE]
        ROLE_RECEPTION_VISITE : [ROLE_RECEPTION, ROLE_VISITE]
        ROLE_CONSTATATION_RECEPTION_VISITE : [ROLE_CONSTATATION, ROLE_RECEPTION, ROLE_VISITE]
        ROLE_CHEF_DE_CENTRE : [ROLE_CONSTATATION, ROLE_RECEPTION, ROLE_VISITE, ROLE_REGISSEUR, ROLE_VERIFICATEUR]
        ROLE_ADMIN : [ROLE_CHEF_DE_CENTRE, ROLE_APPROVISIONNEMENT, ROLE_STAFF]
        ROLE_SUPER_ADMIN : [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\CtUser
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
